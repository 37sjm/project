Read specified sections of Java Persistence and explain the given concepts.
	a. Chapter 3, “What is Java persistence?”
		i. Persistence in Java and how it relates to the impedance mismatch discussed in unit 8
			i. Storing anything to any level of persistence using the Java Programming language.
		ii. POJOs
			i. Plain Old Java Object, not bogged down by framework extensions.
	b. Chapter 4, “Persistence Products, Which to Use?” — Name 2–3 of the major JPA implementations and indicate which one we are using in this class.
		i. EclipseLink, Hibernate, Open JPA, DataNucleus
			i. I believe our class uses EclipseLink
	c. Chapter 5, “Mapping, Round Pegs into Square Holes” — Annotate this Java class for object-relational mapping using Java Annotations with the property access type.
	@Entity
	public class Solder {
	  
	    @Column(name="name")
	    private String name;
	
	    @Column(name="RANK")
	    private String rank;
	
	    @Id
	    @Column(name="serialNumber")
	    private long serialNumber;
	    @ManyToOne(fetch=FetchType.LAZY)
	    @JoinColumn(name="commanderSerialNumber")
	    private long commanderSerialNumber;
	
	    @ManyToMany
	    @JoinTable(name="Soldier_Battles",
		joinColumns=@JoinCoilumn(name="Soldier_SerialNumber", referencedColumnName="serialNumber"),
		inverseJoinColumns=@JoinColumn(name="Battle_ID", refrenecedColumnName="ID"))
	    private List<Battle> battles;
	
	    public String getName() { return name; }    public void setName(String name) { this.name = name; }    public String getRank() { return rank; }    public void setRank(String rank) { this.rank = rank; }    public String getSerialNumber() { return serialNumber; }    public void setSerialNumber(String serialNumber) { this.serialNumber = serialNumber; }}In particular, add annotations for the following.
		○ Persistence Entity — Annotate the class as a persistence entity (Chapter 5 overview).
		○ OID — Annotate the object ID (Section 5.2).
		○ Basic fields — Annotate the non-ID fields (Section 5.6).
		○ Relationships — Add new fields/accessors/annotations that exemplify the following JPA relationships (Section 5.7 overview & Sections 5.7.2–5.7.4).
			§ A many-to-one relationship to a commander — The commander is another Solder object.
			§ A many-to-many relationship to a Battle class — You don’t need to add the Battle class.You don’t need to run this code, but be familiar with the concepts and the annotations that implemen them.
	d. Chapter 6, “Runtime, Doing the Hokey Pokey (EntityManager)”
		i. Entity Manager (Chapter 6 overview)
			i. The EntityManager provides API for creating queries, accessing transactions, and finding, persisting, merging, and deleting objects.
		ii. Injection — We’ll use J2EE dependency injection to access to a container-managed EntityManager (Chapter 6 overview).
			i. An entity manager can either be created through the EntityManagerFactor or injected into an instance variable in an EJB SessionBean
		iii. Persistence operations — Name the four basic persistence operations (Section 6.2).
			i. Persist
			ii. Merge
			iii. Remove
			iv. Find
